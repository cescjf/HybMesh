1) === Stable windows distributions are available at resources page
https://github.com/kalininei/HybMesh/releases/latest
2) === Building from source

2.1) --- Linux (gcc)
System requirements:
    python 2.7
    gcc-c++
    gcc-fortran
    cmake 3.2
    suitesparse devel package
    libxml2 devel
    python-sphinx for documentation building
    libGmsh (optionally). If libGmsh does not present in the system a local copy of libGmsh will be built. For the latter blas and lapack development packages are required.

Procedure:
    mkdir build && cd build
    cmake .. -DCMAKE_BUILD_TYPE=Release
    make -j4
    sudo make install
    cd ../doc
    make

Installation results
    hybmeshpack package will be installed as a standard python package (-> /usr/lib/python2.7/site-packages)
    hybmesh executable -> ${CMAKE_INSTALL_PREFIX}/bin/
    Additional libraries -> ${CMAKE_INSTALL_PREFIX}/lib/hybmesh/
    basic configuration directory /etc/hybmesh
    home directory ~/.hybmesh

2.2) --- Windows (mingw)
System requirments:
    mingw-w64 (dwarf or seh exceptions version)
    msys
    python2.7
    cmake 3.2
    PyInstaller (if exe is needed)
    NSIS with AccessControl Plugin (if installer is needed)
note: python and mingw-w64 bitness should match

Procedure:
    1) open exec_cmake_win.sh file in text editor and set cmake options
    2) open msys shell with administrative access and cd to HybMesh directory
    3) mkdir build && cd build
    4) sh ../exec_cmake_win.sh
    5) make -j4
    6) make install
    7) make pack (if nsis installer is needed)

Installation results:
    hybmeshpack package will be installed as a standard python package (-> Python27/Lib/site-packages)
    Hybmesh main script file -> ${CMAKE_INSTALL_PREFIX}/py/
    Additional libraries -> ${CMAKE_INSTALL_PREFIX}/lib/
    home directory {ProgramData}/hybmesh
    if PyInstaller:
        pyinstaller executable with required libs -> ${CMAKE_INSTALL_PREFIX}/bin/
    if NSIS:
        installer executable -> ${CMAKE_INSTALL_PREFIX}

Initial Windows system configuration:
all installed packages should match target architecture (32/64 bit)

1) install python2.7 and add path/to/python.exe to system paths
2) install PyInstaller using pip with pywin32
5) install cmake. Do not add cmake path to system path as it can lead to problems on 64bit architecture.
6) install NSIS (3.0)
7) download AccessControl plugin from http://nsis.sourceforge.net/AccessControl_plug-in.
Place Plugins/AccessControl.dll -> {NSIS}/Plugins/x86-ansi
      Unicode/Plugins/AccessControl.dll -> {NSIS}/Plugins/x86-unicode
8) download and install mingw-64 through mingw-w64-install.exe
from http://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/installer/
Choose platform. Set Exception type dwarf for i686 and seh for x86_64.
9) download Msys from
http://sourceforge.net/projects/mingw-w64/files/External%20binary%20packages%20%28Win64%20hosted%29/MSYS%20%2832-bit%29/
unzip it to C:\msys and run 
    sh /postinstall/pi.sh
from msys shell. Set path to mingw-w64 directory which contains /bin 
10) place libblas.dll, liblapack from src/libs/external/winlib to {MinGW}/lib
